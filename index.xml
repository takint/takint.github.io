<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jim Le: Full Stack Developer in Vacounver, Canada</title>
    <link>https://takint.github.io/</link>
    <description>Recent content on Jim Le: Full Stack Developer in Vacounver, Canada</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Dec 2020 09:21:32 -0800</lastBuildDate>
    
	<atom:link href="https://takint.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Asynchronous Programming Js</title>
      <link>https://takint.github.io/post/asynchronous-programming-js/</link>
      <pubDate>Tue, 15 Dec 2020 09:21:32 -0800</pubDate>
      
      <guid>https://takint.github.io/post/asynchronous-programming-js/</guid>
      <description>Promises and observables are all about: handling asynchronous execution. There are different ways in JavaScript to create asynchronous code.
 Callbacks Promises Async/Await RxJS Observables  Callbacks This is the old-fashioned classical approach to asynchronous programming. You provide a function as an argument to another function that executes an asynchronous task. When the asynchronous task completes, the executing function calls your callback function. The main disadvantage of this approach occurs when you have multiple chained asynchronous tasks, which requires you to define callback functions within callback functions within callback functions‚Ä¶ This is called callback hell.</description>
    </item>
    
    <item>
      <title>Solving Problem Mindset</title>
      <link>https://takint.github.io/post/solving-problem-mindset/</link>
      <pubDate>Tue, 15 Dec 2020 09:04:53 -0800</pubDate>
      
      <guid>https://takint.github.io/post/solving-problem-mindset/</guid>
      <description>Now, ‚Äúproblem-solving‚Äù as a term in school (where you were five minutes ago) is kind of partial. It‚Äôs rather a ‚Äúproblem-solving training‚Äù ‚Äî it‚Äôs kind of predictable. In real life, on the other hand, solving the same problems, again and again, is the last thing you want to do ‚Äî and it‚Äôs not your job.
Your job is to solve them once and for all ‚Äî big difference. And to do that, you need to identify them, assess them, question, plan, collaborate, initiate, investigate, communicate, adapt.</description>
    </item>
    
    <item>
      <title>Tdd Test Programming</title>
      <link>https://takint.github.io/post/tdd-test-programming/</link>
      <pubDate>Tue, 08 Dec 2020 10:45:08 -0800</pubDate>
      
      <guid>https://takint.github.io/post/tdd-test-programming/</guid>
      <description>Unit Tests: Test individual components in isolation from environment and concrete dependencies Integration Tests: Test how concrete components work together within a given subsystem End-to-End Tests: Test the behavior of an entire system with all parts functioning together
  Distinguish these tests from Automated UI Tests (see below) if I am driving the system via an API instead of a GUI.
 Automated UI Tests: These are commonly used for web-based projects, filling a couple of different roles: Content-based Testing: Verifies that the visual, content, and layout properties of a given view are correct Functional Testing: Verifies end-to-end functionality by driving the UI and verifying (from the UI layer) that the system functions correctly.</description>
    </item>
    
    <item>
      <title>Jim&#39;s braindump</title>
      <link>https://takint.github.io/post/jim-braindump/</link>
      <pubDate>Sun, 29 Nov 2020 13:51:13 -0800</pubDate>
      
      <guid>https://takint.github.io/post/jim-braindump/</guid>
      <description> This is my braindump for a few notes about my favourites and interested tools:  C# (C Sharp):
 Multi-threading programming in C# notes
  JavaScript:
 Arrow functions in JavaScript notes
 Optimized React tips
  Programming:
 Object-Oriented programming
 MVC in a nutshell
   </description>
    </item>
    
    <item>
      <title>React Optimization</title>
      <link>https://takint.github.io/post/react-optimization/</link>
      <pubDate>Sun, 29 Nov 2020 11:51:13 -0800</pubDate>
      
      <guid>https://takint.github.io/post/react-optimization/</guid>
      <description>Parent and child components are often re-rendered in the following scenario:  When setState is called in the same component or parent component.
 Change in the value of ‚Äúprops‚Äù received from a parent.
 Calling forceUpdate in the component.
  React Performance Optimization is easy to achieve with the following simple steps.  Use React Pure Components to reduce Re-rendering Using React Hooks and working with functional programming Use React.</description>
    </item>
    
    <item>
      <title>MVC in a Nutshell</title>
      <link>https://takint.github.io/post/mvc-in-a-nutshell/</link>
      <pubDate>Fri, 27 Nov 2020 00:16:09 -0800</pubDate>
      
      <guid>https://takint.github.io/post/mvc-in-a-nutshell/</guid>
      <description> There are tons of article about MVC pattern. I&amp;rsquo;d like to wrap it in a simple way and easy to understand, no more explaination. </description>
    </item>
    
    <item>
      <title>OOP Programming</title>
      <link>https://takint.github.io/post/oop-programming/</link>
      <pubDate>Tue, 10 Nov 2020 00:23:16 -0800</pubDate>
      
      <guid>https://takint.github.io/post/oop-programming/</guid>
      <description>Object Oriented Programming: As we all may know, it is a programming paradigm based on the concept of &amp;ldquo;objects&amp;rdquo;.
 Class: classes are blueprint of an object. In other words, a class is a template while object are instances of the class.
 Object: an object is a unique entity which has some properties and methods.
 Abstraction is a way of hiding the implementation details and showing only the functionality to the users.</description>
    </item>
    
    <item>
      <title>Arrow Function</title>
      <link>https://takint.github.io/post/arrow-function/</link>
      <pubDate>Tue, 10 Nov 2020 00:08:25 -0800</pubDate>
      
      <guid>https://takint.github.io/post/arrow-function/</guid>
      <description>Main benefit:  No binding of &amp;lsquo;this&amp;rsquo;
ES6 arrow functions can‚Äôt be bound to a this keyword, so it will lexically go up a scope, and use the value of this in the scope in which it was defined.
 No self-referencing
If your function needs to have a self-reference at any point (e.g. recursion, event handler that needs to unbind), it will not work.
  Arrow functions shine best with anything that requires this to be bound to the context, and not the function itself.</description>
    </item>
    
    <item>
      <title>Multi-threading programming</title>
      <link>https://takint.github.io/post/multi-threading-programming/</link>
      <pubDate>Mon, 09 Nov 2020 12:22:17 -0800</pubDate>
      
      <guid>https://takint.github.io/post/multi-threading-programming/</guid>
      <description>Thread safety removes the following conditions in the code:  Race condition occurs when two threads access a shared variable at the same time. The first thread reads the variable, and the second thread writes to the same variable at the same time.
 Deadlock case happens in concurrent or multi-threaded environment. It is kind of a situation in which two or more competing threads or tasks wait for the other task to finish and they never finish.</description>
    </item>
    
    <item>
      <title>Welcome to my personal blog posts!</title>
      <link>https://takint.github.io/post/welcome/</link>
      <pubDate>Wed, 29 May 2019 02:50:52 +0200</pubDate>
      
      <guid>https://takint.github.io/post/welcome/</guid>
      <description> I hope you could find something helpful on your path here.
Cheers ! </description>
    </item>
    
    <item>
      <title></title>
      <link>https://takint.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takint.github.io/about/</guid>
      <description>Hi there, I&amp;rsquo;m Jim üëã I&amp;rsquo;m a software developer from Vancouver, Canada.
Languages and Tools:
üî≠ I‚Äôm currently and mostly working on:
  
      

‚ú® I‚Äôm new to:
  
üå± I‚Äôve learned from college:
    
‚ö° Top languages does not indicate my skill level or something like that, it is a github metric of which languages i have the most code on github:</description>
    </item>
    
  </channel>
</rss>