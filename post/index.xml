<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jim Le: Full Stack Developer in Vacounver, Canada</title>
    <link>https://takint.github.io/post/</link>
    <description>Recent content in Posts on Jim Le: Full Stack Developer in Vacounver, Canada</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Nov 2020 13:51:13 -0800</lastBuildDate>
    
	<atom:link href="https://takint.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jim&#39;s braindump</title>
      <link>https://takint.github.io/post/jim-braindump/</link>
      <pubDate>Sun, 29 Nov 2020 13:51:13 -0800</pubDate>
      
      <guid>https://takint.github.io/post/jim-braindump/</guid>
      <description> This is my braindump for a few notes about my favourites and interested tools:  C# (C Sharp):
 Multi-threading programming in C# notes
  JavaScript:
 Arrow functions in JavaScript notes
 Optimized React tips
  Programming:
 Object-Oriented programming
 MVC in a nutshell
   </description>
    </item>
    
    <item>
      <title>React Optimization</title>
      <link>https://takint.github.io/post/react-optimization/</link>
      <pubDate>Sun, 29 Nov 2020 11:51:13 -0800</pubDate>
      
      <guid>https://takint.github.io/post/react-optimization/</guid>
      <description>Parent and child components are often re-rendered in the following scenario:  When setState is called in the same component or parent component.
 Change in the value of “props” received from a parent.
 Calling forceUpdate in the component.
  React Performance Optimization is easy to achieve with the following simple steps.  Use React Pure Components to reduce Re-rendering Using React Hooks and working with functional programming Use React.</description>
    </item>
    
    <item>
      <title>MVC in a Nutshell</title>
      <link>https://takint.github.io/post/mvc-in-a-nutshell/</link>
      <pubDate>Fri, 27 Nov 2020 00:16:09 -0800</pubDate>
      
      <guid>https://takint.github.io/post/mvc-in-a-nutshell/</guid>
      <description> There are tons of article about MVC pattern. I&amp;rsquo;d like to wrap it in a simple way and easy to understand, no more explaination. </description>
    </item>
    
    <item>
      <title>OOP Programming</title>
      <link>https://takint.github.io/post/oop-programming/</link>
      <pubDate>Tue, 10 Nov 2020 00:23:16 -0800</pubDate>
      
      <guid>https://takint.github.io/post/oop-programming/</guid>
      <description>Object Oriented Programming: As we all may know, it is a programming paradigm based on the concept of &amp;ldquo;objects&amp;rdquo;.
 Class: classes are blueprint of an object. In other words, a class is a template while object are instances of the class.
 Object: an object is a unique entity which has some properties and methods.
 Abstraction is a way of hiding the implementation details and showing only the functionality to the users.</description>
    </item>
    
    <item>
      <title>Arrow Function</title>
      <link>https://takint.github.io/post/arrow-function/</link>
      <pubDate>Tue, 10 Nov 2020 00:08:25 -0800</pubDate>
      
      <guid>https://takint.github.io/post/arrow-function/</guid>
      <description>Main benefit:  No binding of &amp;lsquo;this&amp;rsquo;
ES6 arrow functions can’t be bound to a this keyword, so it will lexically go up a scope, and use the value of this in the scope in which it was defined.
 No self-referencing
If your function needs to have a self-reference at any point (e.g. recursion, event handler that needs to unbind), it will not work.
  Arrow functions shine best with anything that requires this to be bound to the context, and not the function itself.</description>
    </item>
    
    <item>
      <title>Multi-threading programming</title>
      <link>https://takint.github.io/post/multi-threading-programming/</link>
      <pubDate>Mon, 09 Nov 2020 12:22:17 -0800</pubDate>
      
      <guid>https://takint.github.io/post/multi-threading-programming/</guid>
      <description>Thread safety removes the following conditions in the code:  Race condition occurs when two threads access a shared variable at the same time. The first thread reads the variable, and the second thread writes to the same variable at the same time.
 Deadlock case happens in concurrent or multi-threaded environment. It is kind of a situation in which two or more competing threads or tasks wait for the other task to finish and they never finish.</description>
    </item>
    
    <item>
      <title>Welcome to my personal blog posts!</title>
      <link>https://takint.github.io/post/welcome/</link>
      <pubDate>Wed, 29 May 2019 02:50:52 +0200</pubDate>
      
      <guid>https://takint.github.io/post/welcome/</guid>
      <description> I hope you could find something helpful on your path here.
Cheers ! </description>
    </item>
    
  </channel>
</rss>